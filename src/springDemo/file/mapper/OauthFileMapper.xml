<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="springDemo.file.dao.OauthFileMapper">
  <resultMap id="BaseResultMap" type="springDemo.file.vo.OauthFile">
    <result column="file_id" jdbcType="INTEGER" property="fileId" />
    <result column="file_url" jdbcType="VARCHAR" property="fileUrl" />
    <result column="file_type" jdbcType="INTEGER" property="fileType" />
    <result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
    <result column="insert_user" jdbcType="VARCHAR" property="insertUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    file_id, file_url, file_type, insert_time, insert_user, update_time, update_user
  </sql>
  <select id="selectByExample" parameterType="springDemo.file.vo.OauthFileExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from oauth_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="maxSize != null and maxSize != 0">
      limit #{startRowNum} , #{maxSize}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="springDemo.file.vo.OauthFileExample">
    delete from oauth_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="springDemo.file.vo.OauthFile">
    <selectKey keyProperty="fileId" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into oauth_file (file_id, file_url, file_type, 
      insert_time, insert_user, update_time, 
      update_user)
    values (#{fileId,jdbcType=INTEGER}, #{fileUrl,jdbcType=VARCHAR}, #{fileType,jdbcType=INTEGER}, 
      #{insertTime,jdbcType=TIMESTAMP}, #{insertUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="springDemo.file.vo.OauthFile">
    <selectKey keyProperty="fileId" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into oauth_file
    <trim prefix="(" suffix=")" suffixOverrides=",">
      file_id,
      <if test="fileUrl != null">
        file_url,
      </if>
      <if test="fileType != null">
        file_type,
      </if>
      <if test="insertTime != null">
        insert_time,
      </if>
      <if test="insertUser != null">
        insert_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{fileId,jdbcType=INTEGER},
      <if test="fileUrl != null">
        #{fileUrl,jdbcType=VARCHAR},
      </if>
      <if test="fileType != null">
        #{fileType,jdbcType=INTEGER},
      </if>
      <if test="insertTime != null">
        #{insertTime,jdbcType=TIMESTAMP},
      </if>
      <if test="insertUser != null">
        #{insertUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="springDemo.file.vo.OauthFileExample" resultType="java.lang.Long">
    select count(*) from oauth_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update oauth_file
    <set>
      <if test="record.fileId != null">
        file_id = #{record.fileId,jdbcType=INTEGER},
      </if>
      <if test="record.fileUrl != null">
        file_url = #{record.fileUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.fileType != null">
        file_type = #{record.fileType,jdbcType=INTEGER},
      </if>
      <if test="record.insertTime != null">
        insert_time = #{record.insertTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.insertUser != null">
        insert_user = #{record.insertUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update oauth_file
    set file_id = #{record.fileId,jdbcType=INTEGER},
      file_url = #{record.fileUrl,jdbcType=VARCHAR},
      file_type = #{record.fileType,jdbcType=INTEGER},
      insert_time = #{record.insertTime,jdbcType=TIMESTAMP},
      insert_user = #{record.insertUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <insert id="batchInsert" parameterType="java.util.List">
    insert into oauth_file (file_url, file_type, 
      insert_user,update_user
      )
    values 
    <foreach collection="list" item="item" index="index" separator="," >  
      ( #{item.fileUrl,jdbcType=VARCHAR}, #{item.fileType,jdbcType=INTEGER}, 
      	#{item.insertUser,jdbcType=VARCHAR},#{item.updateUser,jdbcType=VARCHAR}
      )
    </foreach>
  </insert>
</mapper>